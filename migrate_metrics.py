#!/usr/bin/env python3
"""
Script de migraci√≥n para implementar el sistema de m√©tricas y anal√≠ticas en Bytchat 4.0
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import SessionLocal, engine
from app import models, schemas
from sqlalchemy import text
from datetime import datetime, timedelta
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_metrics_tables():
    """Crea las nuevas tablas de m√©tricas en la base de datos"""
    logger.info("üîÑ Creando tablas de m√©tricas...")
    
    try:
        # Esto crear√° todas las tablas definidas en models.py que no existan
        models.Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tablas de m√©tricas creadas exitosamente")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error creando tablas: {e}")
        return False

def create_default_plans_for_existing_users():
    """Crea planes por defecto para usuarios existentes"""
    logger.info("üîÑ Creando planes por defecto para usuarios existentes...")
    
    db = SessionLocal()
    try:
        # Obtener todos los usuarios que no tienen plan
        users_without_plan = db.query(models.User).outerjoin(models.UserPlan).filter(
            models.UserPlan.id == None
        ).all()
        
        plans_created = 0
        for user in users_without_plan:
            # Crear plan gratuito por defecto
            user_plan = models.UserPlan(
                user_id=user.id,
                plan_type=models.PlanType.FREE,
                tokens_included=100000,
                tokens_remaining=100000,
                monthly_price=0,
                overage_rate=15,  # $0.15 per 1K tokens en centavos/100
                current_period_end=datetime.utcnow() + timedelta(days=30)
            )
            db.add(user_plan)
            plans_created += 1
        
        db.commit()
        logger.info(f"‚úÖ Planes creados para {plans_created} usuarios existentes")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error creando planes por defecto: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def migrate_existing_chat_logs():
    """Migra los logs existentes de chat_metrics.log a la nueva tabla de anal√≠ticas"""
    logger.info("üîÑ Migrando logs existentes de chat...")
    
    db = SessionLocal()
    try:
        # Verificar si existe el archivo de logs
        if not os.path.exists('chat_metrics.log'):
            logger.info("üìù No se encontr√≥ chat_metrics.log, saltando migraci√≥n de logs")
            return True
        
        events_migrated = 0
        with open('chat_metrics.log', 'r') as f:
            for line in f:
                try:
                    # Parsear l√≠nea: "2025-07-03T04:12:58.634693 | bot_id=6 | userAnonId=2qty4kyiw3x1751515978494 | mensaje=hola"
                    parts = line.strip().split(' | ')
                    if len(parts) >= 4:
                        timestamp_str = parts[0]
                        bot_id_str = parts[1].split('=')[1]
                        user_anon_id = parts[2].split('=')[1]
                        mensaje = parts[3].split('=', 1)[1]
                        
                        # Convertir timestamp
                        timestamp = datetime.fromisoformat(timestamp_str)
                        
                        # Crear evento anal√≠tico
                        event = models.AnalyticsEvent(
                            bot_id=int(bot_id_str),
                            event_type=models.EventType.CHAT_MESSAGE,
                            event_data=f'{{"query": "{mensaje}", "migrated_from_log": true}}',
                            user_anon_id=user_anon_id,
                            created_at=timestamp
                        )
                        db.add(event)
                        events_migrated += 1
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è  Error procesando l√≠nea de log: {e}")
                    continue
        
        db.commit()
        logger.info(f"‚úÖ {events_migrated} eventos migrados desde chat_metrics.log")
        
        # Crear backup del archivo original
        backup_name = f'chat_metrics_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'
        os.rename('chat_metrics.log', backup_name)
        logger.info(f"üì¶ Backup creado: {backup_name}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error migrando logs: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def verify_migration():
    """Verifica que la migraci√≥n se haya completado correctamente"""
    logger.info("üîç Verificando migraci√≥n...")
    
    db = SessionLocal()
    try:
        # Verificar tablas creadas
        table_checks = {
            "user_plans": models.UserPlan,
            "token_usage": models.TokenUsage,
            "billing_records": models.BillingRecord,
            "analytics_events": models.AnalyticsEvent
        }
        
        for table_name, model_class in table_checks.items():
            count = db.query(model_class).count()
            logger.info(f"üìä Tabla {table_name}: {count} registros")
        
        # Verificar usuarios con planes
        users_with_plans = db.query(models.UserPlan).count()
        total_users = db.query(models.User).count()
        logger.info(f"üë• {users_with_plans}/{total_users} usuarios tienen planes asignados")
        
        # Verificar eventos migrados
        migrated_events = db.query(models.AnalyticsEvent).filter(
            models.AnalyticsEvent.event_data.like('%migrated_from_log%')
        ).count()
        if migrated_events > 0:
            logger.info(f"üìà {migrated_events} eventos migrados desde logs")
        
        logger.info("‚úÖ Verificaci√≥n completada")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en verificaci√≥n: {e}")
        return False
    finally:
        db.close()

def show_next_steps():
    """Muestra los pr√≥ximos pasos despu√©s de la migraci√≥n"""
    logger.info("\n" + "="*60)
    logger.info("üéâ MIGRACI√ìN COMPLETADA EXITOSAMENTE")
    logger.info("="*60)
    logger.info("\nüìã PR√ìXIMOS PASOS:")
    logger.info("1. Reiniciar la aplicaci√≥n para cargar los nuevos modelos")
    logger.info("2. Los usuarios existentes tienen plan GRATUITO por defecto")
    logger.info("3. Las nuevas consultas de usuarios autenticados tendr√°n tracking")
    logger.info("4. El widget p√∫blico sigue funcionando sin cambios")
    logger.info("\nüîß ENDPOINTS DISPONIBLES:")
    logger.info("‚Ä¢ GET /users/me/analytics - Dashboard del usuario")
    logger.info("‚Ä¢ GET /users/me/plan - Plan actual")
    logger.info("‚Ä¢ GET /admin/analytics/overview - Dashboard admin")
    logger.info("\nüí° RECOMENDACIONES:")
    logger.info("‚Ä¢ Probar el endpoint /users/me/analytics despu√©s del reinicio")
    logger.info("‚Ä¢ Verificar que el tracking de tokens funcione en /bots/{id}/chat")
    logger.info("‚Ä¢ Los logs antiguos est√°n respaldados autom√°ticamente")

def main():
    """Funci√≥n principal de migraci√≥n"""
    logger.info("üöÄ Iniciando migraci√≥n del sistema de m√©tricas...")
    logger.info("="*60)
    
    # Paso 1: Crear tablas
    if not create_metrics_tables():
        logger.error("üí• Fall√≥ la creaci√≥n de tablas. Abortando migraci√≥n.")
        return False
    
    # Paso 2: Crear planes por defecto
    if not create_default_plans_for_existing_users():
        logger.error("üí• Fall√≥ la creaci√≥n de planes por defecto. Abortando migraci√≥n.")
        return False
    
    # Paso 3: Migrar logs existentes
    if not migrate_existing_chat_logs():
        logger.error("üí• Fall√≥ la migraci√≥n de logs. Continuando...")
        # No abortamos aqu√≠ porque no es cr√≠tico
    
    # Paso 4: Verificar migraci√≥n
    if not verify_migration():
        logger.error("üí• Fall√≥ la verificaci√≥n. Revisar manualmente.")
        return False
    
    # Mostrar pr√≥ximos pasos
    show_next_steps()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            logger.info("\n‚úÖ Migraci√≥n completada exitosamente")
            sys.exit(0)
        else:
            logger.error("\n‚ùå Migraci√≥n fall√≥")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è  Migraci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\nüí• Error inesperado: {e}")
        sys.exit(1) 